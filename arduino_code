// WireData - Version: Latest 
#include <Wire.h>

// LiquidCrystal I2C - Version: Latest 
#include <LiquidCrystal_I2C.h>


// DHT11 - Version: Latest 
#include <DHT.h>

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 3"
  https://create.arduino.cc/cloud/things/c9e91344-938d-457e-97bf-4a31220e6233 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float current_Temp;
  float currrent_Humid;
  int current_Moisture;
  int trigger_Level;
  CloudSchedule scheduler;
  bool light_Status;
  bool pump_Status;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

//Define light relay
#define light 16

//Define DHT11 Sensor
#define DHTPIN 2
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);

//define varibales for TEMP and HUMID
float temp;
float hum;

//sensor constant
//constant for dry sensor

const int DryValue = 1024;

//constand for wet value
const int WetValue = 600;

//variables for soilMoisture

int soilMoistureValue;
int soilMoisturePercent;

//Analog input for soil
#define SENSOR_IN1 A0

//Relay Port for Pump D5 pin
#define RELAY_OUT 14

//varibale for pump trigger
int pump_trigger = 30;

LiquidCrystal_I2C lcd(0x3F, 16, 2); // Set the LCD address to 0x27 for a 16 chars and 2 line display

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //Initaialize DHT11
  dht.begin();
  
  //Set Relay as Output Pump
  pinMode(RELAY_OUT, OUTPUT);
  
  //TURN OFF RELAY PUMP
  digitalWrite(RELAY_OUT, HIGH);
  
  //SET RELAY LIGHT AS OUTPUT
  pinMode(light, OUTPUT);
  
  //TURN OFF LIGHT RELAY
  digitalWrite(light,HIGH);
  
  //set pump status
  pump_Status = false;
  
  
  //LCD DISPLAY
  lcd.init();                       // Initialize the LCD
  lcd.backlight();                  // Turn on the backlight
  lcd.clear();                      // Clear the LCD screen

}

void loop() {
  ArduinoCloud.update();
  
  // Get Temperature and Humidity
  temp = dht.readTemperature();
  hum = dht.readHumidity();
  
  //to display
  int x =temp;
  int y = hum;
  
  
  //pass temperature and humidity values to cloud varibles
  current_Temp = temp;
  currrent_Humid =hum;
  
  //Get Soil Moisture Value
  soilMoistureValue = analogRead(SENSOR_IN1);
  
  //Determine soil Moisture percentage value
  soilMoisturePercent = map(soilMoistureValue, DryValue, WetValue, 0, 100);
  
  //Keep Values Between 0 and 100
  soilMoisturePercent = constrain(soilMoisturePercent, 0, 100);
  
  //print raw value to serial monitor for sensor
  Serial.println(soilMoistureValue);
  
  //pass Soil Moisture to cloud variable
  current_Moisture =soilMoisturePercent;
  
  //see if pump should be triggerd
  if (soilMoisturePercent <= pump_trigger){
    //Turn Pump On
    pumpOn();
  
  }else {
    //Turn Pump Off
    pumpOff();
  }
  
  //Light System
  
  if (scheduler.isActive()){
    digitalWrite(light, LOW);
    light_Status =true;
  }else {
    digitalWrite(light, HIGH);
    light_Status = false;
  }
  
  //DISPLAY
  
   lcd.setCursor(0, 0);               // Set the cursor to the first column and first row
   lcd.print(" *-PLANT BUDDY-*");     // Print some text
   lcd.setCursor(0,1);
   lcd.print("S:");
   lcd.print(soilMoisturePercent);
   lcd.print(" T:");
   lcd.print(x);
   lcd.print(" H:");
   lcd.print(hum);

  
  
}

void pumpOn(){
  //Turn pump On
  digitalWrite(RELAY_OUT, LOW);
  pump_Status = true;
}

void pumpOff(){
  //Turn Pump Off
  digitalWrite(RELAY_OUT, HIGH);
  pump_Status = false;
}

/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/










/*
  Since PumpStatus is READ_WRITE variable, onPumpStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
//void onPumpStatusChange()  {
  // Add your code here to act upon PumpStatus change
//}


/*
  Since TriggerLevel is READ_WRITE variable, onTriggerLevelChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTriggerLevelChange()  {
  // Add your code here to act upon TriggerLevel change
  pump_trigger = trigger_Level;
}


/*
  Since Scheduler is READ_WRITE variable, onSchedulerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSchedulerChange()  {
  // Add your code here to act upon Scheduler change
}
